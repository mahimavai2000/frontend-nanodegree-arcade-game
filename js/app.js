var lives = 3;
var score = 0;
var level = 1;
var go = true; //To pause the game
var gameOwnState = false;
var allGems = []; //GemsArray

//Gems Values
var values = {
    gem_Height: 20,
    gem_Width: 20,
    gem_X: [0, 100, 200, 300, 400, 500, 600],
    gem_Y: [160, 230, 280, 310, 190, 200],
};

// Enemies our player must avoid
var Enemy = function(x, y, speed) {
    // Variables applied to each of our instances go here,
    // we've provided one for you to get started

    // The image/sprite for our enemies, this uses
    // a helper we've provided to easily load images
    this.sprite = 'images/enemy-bug.png';
    this.x = x;
    this.y = y;
    this.speed = speed;
};

// Update the enemy's position, required method for game
// Parameter: dt, a time delta between ticks
Enemy.prototype.update = function(dt) {
    // You should multiply any movement by the dt parameter
    // which will ensure the game runs at the same speed for
    // all computers.
    // Update all the enemies  
    this.x = this.x + (this.speed * dt);
    if (this.x > 600) {
        this.x = 0;
    }
    return this.x;
};

// Draw the enemy on the screen, required method for game
Enemy.prototype.render = function() {
    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
};

/* Returns a random integer. 
 * Accepts two arguments, a minimum and maximum number.
 */
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
}

//Writing Gem class to display 2 gems randomly in each level increases
var Gem = function(positionX, positionY) {
    // Include the blue, green and orange gem images in an array
    var gemArray = ['Gem-Blue.png', 'Gem-Green.png', 'Gem-Orange.png'];
    // Set a random gem image from the gemArray
    this.sprite = 'images/' + gemArray[getRandomInt(0, 2)];
    // Set the gem's height
    this.height = values.gem_Height;
    // Set the gem's width
    this.width = values.gem_Width;
    // Set a the x position of the gem
    this.x = positionX;
    // Set a the y position of the gem
    this.y = positionY;
    // Set a the gemsArray to push all gems in this array
    this.gemsArray = [];
};

/* Draw the Gem on the canvas
 * The gem's x and y positions are determined by random positions
 * generated by from the the POSITION_X and POSITION_Y contstant arrays.
 */
Gem.prototype.render = function() {
    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
};

/*This method accepts an argument to determine the number of 
 gems to gemsList and push into the allGems array.*/
Gem.prototype.gemsList = function(number) {
    for (var i = 0; i < number; i++) {
        // Call the getRandomInt function and set the gems x position on the canvas.
        var positionX = getRandomInt(0, 6);
        // Call the getRandomInt function and set the gems y position on the canvas.
        var positionY = getRandomInt(0, 3);
        // Instatiate a new gem object.
        this.gemsArray[allGems.length] = new Gem(values.gem_X[positionX], values.gem_Y[positionY]);
        // Push the new gem into the allGems array.
        allGems.push(this.gemsArray[allGems.length]);
    }
};

/* Reset Gems
 * Clear all gems from the canvas
 */
Gem.prototype.reset = function() {
    var gemsCount = allGems.length;
    for (i = 0; i < gemsCount; i++) {
        allGems.splice(i, allGems.length);
    }
};

// Instantiate a new Gem object
var gem = new Gem();

// Now write your own player class
var Player = function(x, y) {
    // Variables applied to each of our instances go here,
    // we've provided one for you to get started
    // The image/sprite for our enemies, this uses
    // a helper we've provided to easily load images
    this.sprite = 'images/char-pink-girl.png';
    this.x = x;
    this.y = y;
};

// This class requires an update(), render() and
// a handleInput() method.
Player.prototype.update = function(dt) {
    // You should multiply any movement by the dt parameter
    // which will ensure the game runs at the same speed for
    // all computers.

    this.checkCollision();
    this.level();
    this.score();
    this.gameOwn();
};

Player.prototype.checkPlayerBounds = function() {
    // Check bounds for x axix
    if (this.x < 0 || this.x > 600) {
        if (this.x < 0) {
            this.x = 0;
        } else {
            this.x = 600;
        }
    }
    // Check bounds for x axix
    if (this.y < 0 || this.y > 520) {
        if (this.y < 0) {
            this.y = 0;
        } else {
            this.y = 480;
        }
    }
};

Player.prototype.render = function() {
    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
};

Player.prototype.handleInput = function(direction) {
    // You should multiply any movement by the dt parameter
    // which will ensure the game runs at the same speed for
    // all computers.

    switch (direction) {
        case "left":
            this.x -= 50;
            break;
        case "right":
            this.x += 50;
            break;
        case "up":
            this.y -= 50;
            break;
        case "down":
            this.y += 50;
            break;
    }
};

//Reset the player state and Lives
Player.prototype.Reset = function() {
    this.x = 300;
    this.y = 480;
    document.getElementsByClassName('lives')[0].innerHTML = 'Lives: ' + lives;
};

//Open game over window if lives is equal to 0 and reset the player Lives and scrore
Player.prototype.gameOver = function() {
    if (lives === 0) {
        go = false; //pause the enemies  
        document.getElementById('game-over').style.display = 'block';
        document.getElementsByClassName('finalScore')[0].innerHTML = 'Final Score: ' + score;
        document.getElementById('game-over-overlay').style.display = 'block';
        this.Reset();
        this.resetScore();
        gem.reset();
    }
};

//Check Collision
Player.prototype.checkCollision = function() {
    for (var i = 0; i < allEnemies.length; i++) {
        if (this.x < allEnemies[i].x + 75 &&
            this.x + 65 > allEnemies[i].x &&
            this.y < allEnemies[i].y + 50 &&
            70 + this.y > allEnemies[i].y) {
            lives--; // Decrement the lives whenever collision occured with enemies
            this.Reset(); //Reser the player when collision occured  
            this.gameOver(); // Call game over function when lives decreased into 0
        }
    }

    //Collision with Gems
    for (var j = 0; j < allGems.length; j++) {
        if (this.x < allGems[j].x + 75 &&
            this.x + 65 > allGems[j].x &&
            this.y < allGems[j].y + 50 &&
            70 + this.y > allGems[j].y) {
            score += 300; //Add 300 points with current score when gems collision oocured
            allGems[j].x = -300; //Disappear the gems when gems collision oocured           
        }
    }
};

//Level method to increase the next levels
Player.prototype.level = function() {
    if (this.y === 0) {
        level = level + 1; //increase the level at everytime when player reaches the water 
        score += 500; //Add the score 500 if player reached water     
        this.Reset(); //player reset
        gem.reset(); //Gems reset
        gem.gemsList(2); //Add 2 gems

        //Finish the game when level completes 5
        if (level === 6) {
            console.log(lives);
            gameOwnState = true;
        }
    }
};

//Display score and Levels
Player.prototype.score = function() {
    document.getElementsByClassName('lives')[0].innerHTML = 'Lives: ' + lives;
    document.getElementsByClassName('score')[0].innerHTML = 'Score: ' + score;
    document.getElementsByClassName('level')[0].innerHTML = 'Level: ' + level;
};

// Reset the Lives,Score and Level 
Player.prototype.resetScore = function() {
    lives = 3; //reset lives
    score = 0; //reset score
    level = 1; //reset level        
};

//Display Game Own window
Player.prototype.gameOwn = function() {
    if (gameOwnState) {
        level = 5;
        gameOwnState = false;
        go = false; //pause the enemies 
        this.Reset(); //reset the player      
        document.getElementById('game-own').style.display = 'block';
        document.getElementsByClassName('gameownfinalScore')[0].innerHTML = 'Final Score: ' + score;
        document.getElementById('game-own-overlay').style.display = 'block';
        this.score(); // Display the current score details  
        this.resetScore(); //reset Score board        
        gem.reset(); //reset the gems
    }
};

// Now instantiate your objects.
var allEnemies = [];
var enemy1 = new Enemy(10, 70, 300);
var enemy2 = new Enemy(10, 150, 170);
var enemy3 = new Enemy(10, 230, 220);

// Place all enemy objects in an array called allEnemies
//var allEnemies = [enemy1, enemy2, enemy3];
allEnemies.push(enemy1, enemy2, enemy3);

// Place the player object in a variable called player
var player = new Player(300, 480);

// This listens for key presses and sends the keys to your
// Player.handleInput() method. You don't need to modify this.
document.addEventListener('keyup', function(e) {
    var allowedKeys = {
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down'
    };
    player.handleInput(allowedKeys[e.keyCode]);
    player.checkPlayerBounds();
});